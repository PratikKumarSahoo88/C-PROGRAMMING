#include <stdio.h>
#include <stdlib.h>
#define MAX_TREE_HT 50
struct MinHNode{
    char item;
    unsigned freq;
    struct MintNode *left,*right;
};
struct MinHeap{
    unsigned size;
    unsigned capacity;
    struct MinHNode **array;
    
};
struct MinHNode *newNode(char item,unsigned freq)
{
    struct MinHNode *temp=(struct MinHNode *)malloc(sizeof(MinHnode))
    temp ->left=temp->right=NULL;
    temp->item=item;
    temp->freq=freq;
    return temp;
}struct MinHeap *createMinH(unsigned capacity)
{
    struct MinHeap *MinHeap=(struct MinHeap*)malloc(sizeof(struct MinHeap));
    minHeap->size=0;
    minHeap->capacity=capacity;
    minHeap->array=(struct MinHNode **)malloc(minHeap->capacity*sizeof(struct MinHNode*));
    return minHeap;
}
void swapMinHNode(struct MinHnode **a,struct MinHNode **b)
{
    struct MinHNode *t=*a;
    *a=*b;
    *b=*t;
}
void minHeapify(struct MinHeap * minHeap,int idx)
{
    int smallest=idx;
    int left=2*idx+1,right=2*idx+2;
    if(left<minHeap->size && minHeap->array[left]->freq<minHeap->array[smallest]->freq)
    smallest=left;
    if(right<minHeap->size && minHeap->array[right]->freq<minHeap->array[smallest]->freq)
    smallest=right;
    if(smallest!=idx)
    {
        swapMinHNode(&minHeap->array[smallest]&minHeap->array[idx])
        minHeapify(minheap,smallest);
    }
}
int checkSizeOne(struct MinHeap *minHeap)
{
    return(minHeap->size==1);
    
}
struct MinHNode *etractMin(struct MinHeap *minHeap)
{
    struct MinHNode *temp=minHeap->array[0];
    minHeap->array[0]=minHeap->array[minHeap->size-1];
    --minHeap->size;
    minHeapify(minHeap,0);
    return temp;
}
void insertMinheap(struct MinHeap *minHeap,struct MinHNode*minHeapNode)
{
    ++minHeap->size;
    int i=minHeap->size-1;
    while(i&&minHeapNode->freq<minHeap->array[(i-1)/2]->freq)
    {
        minHeap->array[i]=minHeap->array[(i-1)/2];
        i=(i-1)/2;
    }
    minHeap->array[i]=minHeapNode;
}
void buildMinHeap (struct MinHeap *minHeap)
{
    int n=minheap->size-1;
    int i;
    for(i=(n-1)/2;i>=0;--1)
    minHeapify(minHeap,i);
}
